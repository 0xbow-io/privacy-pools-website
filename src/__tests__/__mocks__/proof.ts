import { Hash, MerkleProof, Secret, Withdrawal } from '~/types';

export const MOCK_MERKLE_PROOF: MerkleProof = {
  root: BigInt('0x1234'),
  siblings: [BigInt(1), BigInt(2), BigInt(3)],
  indices: [0, 1, 0],
};

export const MOCK_WITHDRAWAL_PROOF = {
  withdrawalProofInput: {
    withdrawalAmount: 5000000000000000n,
    stateMerkleProof: {
      root: 6206777583816685329272817877984104599931275836640893407536892572933933393423n as Hash,
      leaf: 12562112863356767834824755403098252715944125869716894193713204988266661786127n as Hash,
      index: 30,
      siblings: [
        8919189645151392294266602611610692387072561612948851802643324031935556208781n as Hash,
        14869158131879094775706868219992990772426820277225365360298021704542975158359n as Hash,
        16482046066039619519316665298354428491745980526847076336197578110519646886332n as Hash,
        15184599992401636308670657526943149847558501824457303646054476924826724194895n as Hash,
        12901559763286721977834597288817433681718554419735670283927789517807180972454n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
      ],
    },
    aspMerkleProof: {
      root: 3339038059573328884619025877428344783241175828315308863295538600402493237424n as Hash,
      leaf: 3671268485346619068830148444345279765971052688979705983202029069351958609769n as Hash,
      index: 15,
      siblings: [
        14822592901153819824190582073587731663054762187728964538649167014042154481667n as Hash,
        102910779585339230835375104720092666111509323972965060238534974125608299017n as Hash,
        16868179887259763433701787925162040114967707045823714696185323055471563423997n as Hash,
        20023588318000434453598690596117123428451352408350169633790168607015247489043n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
        0n as Hash,
      ],
    },
    stateRoot: 6206777583816685329272817877984104599931275836640893407536892572933933393423n as Hash,
    aspRoot: 3339038059573328884619025877428344783241175828315308863295538600402493237424n as Hash,
    stateTreeDepth: 32n,
    aspTreeDepth: 32n,
    context: 197480414915664239833576891699111254938029302159026659691084271254816399229n,
    newSecret: 538510684214055081689059934220780204567895481724421294712844690206082747045n as Secret,
    newNullifier: 17451751857812177308411681785716158599331106959819027333175051335322434193315n as Secret,
  },
  commitment: {
    hash: 12562112863356767834824755403098252715944125869716894193713204988266661786127n as Hash,
    nullifierHash: 10566870523581540711627200663731613615716399674438372739623705984413971159544n as Hash,
    preimage: {
      value: 9900000000000000n,
      label: 3671268485346619068830148444345279765971052688979705983202029069351958609769n,
      precommitment: {
        hash: 20870838087839473916064304684462897115439341823676073752140846417452593033705n as Hash,
        nullifier: 10636769061409717694897381230854008407633086732793857223743571118196607679520n as Secret,
        secret: 461515393047877836338620122136797816377262828042237147072188843685533956585n as Secret,
      },
    },
  },
};

export const MOCK_WITHDRAWAL_REQUEST: Withdrawal = {
  processooor: '0x1234567890123456789012345678901234567890',
  data: '0x0000000000000000000000001234567890123456789012345678901234567890000000000000000000000000532fe91148de56739c3cab5e4ce809ea455747a000000000000000000000000000000000000000000000000000000000000493e0',
};
